--find ids and the names of all managers (id in the column reports_to), the number of employees (and the average age) who report directly to them
with managers as(
  select reports_to as mng, rank() over (partition by reports_to order by employee_id) as rnk, age
  from Employees
  where reports_to is not null
)
, age_rnk as(
  select mng, round(avg(age*1.00),0) as average_age, max(rnk) as reports_count
  from managers
  group by mng
)

select distinct m.mng as employee_id, name, reports_count, average_age
from managers m left join age_rnk a on m.mng=a.mng left join Employees e on m.mng=e.employee_id --

--find the confirmation rate of each user
SELECT s1.user_id, ISNULL(ROUND(SUM(case action when 'confirmed' then 1 else 0 end)*1.0/ NULLIF(COUNT(*),0),2),0) AS 'confirmation_rate'
FROM Signups s1 LEFT JOIN Confirmations c1 ON s1.user_id = c1.user_id
GROUP BY s1.user_id

--find the number of times each student attended each exam
SELECT s1.student_id, student_name, s2.subject_name, ISNULL(count(e1.subject_name),0) AS attended_exams
FROM Students s1 CROSS JOIN Subjects s2 LEFT JOIN Examinations e1 ON s1.student_id = e1.student_id AND s2.subject_name = e1.subject_name
GROUP BY s1.student_id, student_name, s2.subject_name, e1.subject_name
ORDER BY s1.student_id, s2.subject_name

--find the average time each machine takes to complete a process
SELECT a1.machine_id, ROUND(AVG(a1.timestamp - a2.timestamp), 3) AS processing_time
FROM Activity a1 JOIN Activity a2 ON a1.machine_id = a2.machine_id AND a1.process_id = a2.process_id AND a1.activity_type = 'end' AND a2.activity_type = 'start'
GROUP BY a1.machine_id

--find all dates' Id with higher temperatures compared to its previous dates
SELECT w1.id
FROM WEATHER w1 JOIN WEATHER W2 ON DATEDIFF(day, w1.recordDate, w2.recordDate) = -1 AND w1.temperature > w2.temperature
